openapi: 3.0.0
info:
  title: Carts Documentation
  version: 1.0.0
paths:
  /carts/insertion:
    get:
      summary: Insert carts from the file system
      tags:
        - Carts
      responses:
        '200':
          description: Carts inserted successfully
  /carts:
    get:
      summary: Get all carts
      tags:
        - Carts
      responses:
        '200':
          description: List of carts retrieved successfully
    post:
      summary: Create a new cart
      tags:
        - Carts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        '201':
          description: Cart created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
  /carts/{cid}:
    get:
      summary: Get a cart by ID
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          required: true
          schema:
            type: objectId
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '404':
          description: Cart not found
    put:
      summary: Update a cart by ID
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          required: true
          schema:
            type: objectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        '200':
          description: Cart updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '404':
          description: Cart not found
    delete:
      summary: Delete a cart by ID
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          required: true
          schema:
            type: objectId
      responses:
        '200':
          description: Cart deleted successfully
        '404':
          description: Cart not found
  /carts/purchase:
    post:
      summary: Purchase a cart
      tags:
        - Carts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
      responses:
        '200':
          description: Cart purchased successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Cart not found
          
components:
  schemas:
    Cart:
      type: object
      properties:
        products:
          type: array
          items:
            type: object
            properties:
              product:
                type: objectId
                description: The unique identifier for the product.
              quantity:
                type: integer
                description: The quantity of the product in the cart.
      required:
        - products
      example:
        products:
          - product: "64f3568a564f7aa08e890d44"
            quantity: 3
          - product: "64f3568a564f7aa08e890d5a"
            quantity: 10
    CartResponse:
      type: object
      properties:
        message:
          type: string
          description: A message describing the operation result.
        cart:
          $ref: '#/components/schemas/Cart'
    PurchaseRequest:
      type: object
      properties:
        cart:
          type: objectId
          description: The unique identifier for the cart to purchase.
        email:
          type: string
          description: The email address of the user making the purchase.
      required:
        - cart
        - email
      example:
        cart: "64f3568a564f7aa08e890d45"
        email: "user@example.com"
    Ticket:
      type: object
      properties:
        code:
          type: string
          description: The unique code for the ticket.
        amount:
          type: number
          description: The total amount of the ticket.
        purchasedBy:
          type: string
          description: The email address of the user who purchased the cart.
      example:
        code: "2023100201"
        amount: 1500
        purchasedBy: "user@example.com"
